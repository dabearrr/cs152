Grammar

    0 $accept: program $end

    1 program: program function
    2        | function

    3 function: FUNCTION IDENT SEMICOLON function_chunk_a function_chunk_b function_chunk_c

    4 function_chunk_a: BEGIN_PARAMS declaration_s END_PARAMS
    5                 | BEGIN_PARAMS END_PARAMS

    6 function_chunk_b: BEGIN_LOCALS declaration_s END_LOCALS
    7                 | BEGIN_LOCALS END_LOCALS

    8 function_chunk_c: BEGIN_BODY statement_ns END_BODY
    9                 | BEGIN_BODY END_BODY

   10 declaration_s: declaration SEMICOLON declaration_s
   11              | declaration SEMICOLON

   12 statement_ns: statement SEMICOLON statement_ns
   13             | statement SEMICOLON

   14 declaration: identifier_ns COLON INTEGER
   15            | identifier_ns COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

   16 identifier_ns: IDENT COMMA identifier_ns
   17              | IDENT

   18 statement: a_statement
   19          | b_statement
   20          | c_statement
   21          | d_statement
   22          | e_statement
   23          | f_statement
   24          | g_statement
   25          | h_statement
   26          | i_statement

   27 a_statement: var ASSIGN expression

   28 b_statement: IF bool_expr THEN statement_ns ENDIF
   29            | IF bool_expr THEN ELSE statement_ns ENDIF

   30 c_statement: WHILE bool_expr BEGINLOOP statement_ns ENDLOOP

   31 d_statement: DO BEGINLOOP statement_ns ENDLOOP WHILE bool_expr

   32 e_statement: FOREACH IDENT IN IDENT BEGINLOOP statement_ns ENDLOOP

   33 f_statement: READ var var_ns

   34 g_statement: WRITE var var_ns

   35 h_statement: CONTINUE

   36 i_statement: RETURN expression

   37 var: IDENT
   38    | IDENT L_SQUARE_BRACKET expression R_SQUARE_BRACKET

   39 var_ns: %empty
   40       | COMMA var var_ns

   41 bool_expr: relation_and_expr
   42          | relation_and_expr OR bool_expr

   43 relation_and_expr: relation_expr
   44                  | relation_expr AND relation_and_expr

   45 relation_expr: NOT rexpr
   46              | rexpr

   47 rexpr: expression comp expression
   48      | TRUE
   49      | FALSE
   50      | L_PAREN bool_expr R_PAREN

   51 comp: EQ
   52     | NEQ
   53     | LT
   54     | GT
   55     | LTE
   56     | GTE

   57 expression: multiplicative_expr ADD multiplicative_expr
   58           | multiplicative_expr SUB multiplicative_expr
   59           | multiplicative_expr

   60 multiplicative_expr: multiplicative_expr MULT term
   61                    | multiplicative_expr DIV term
   62                    | multiplicative_expr MOD term
   63                    | term

   64 term: SUB var
   65     | var
   66     | SUB NUMBER
   67     | NUMBER
   68     | L_PAREN expression R_PAREN
   69     | IDENT L_PAREN expression exp_s R_PAREN
   70     | IDENT L_PAREN R_PAREN

   71 exp_s: COMMA expression exp_s
   72      | %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
FUNCTION (258) 3
BEGIN_PARAMS (259) 4 5
END_PARAMS (260) 4 5
BEGIN_LOCALS (261) 6 7
END_LOCALS (262) 6 7
BEGIN_BODY (263) 8 9
END_BODY (264) 8 9
INTEGER (265) 14 15
ARRAY (266) 15
OF (267) 15
IF (268) 28 29
THEN (269) 28 29
ENDIF (270) 28 29
ELSE (271) 29
WHILE (272) 30 31
DO (273) 31
FOREACH (274) 32
IN (275) 32
BEGINLOOP (276) 30 31 32
ENDLOOP (277) 30 31 32
CONTINUE (278) 35
READ (279) 33
WRITE (280) 34
TRUE (281) 48
FALSE (282) 49
SEMICOLON (283) 3 10 11 12 13
COLON (284) 14 15
COMMA (285) 16 40 71
ASSIGN (286) 27
RETURN (287) 36
AND (288) 44
OR (289) 42
L_PAREN (290) 50 68 69 70
R_PAREN (291) 50 68 69 70
L_SQUARE_BRACKET (292) 15 38
R_SQUARE_BRACKET (293) 15 38
MULT (294) 60
DIV (295) 61
MOD (296) 62
ADD (297) 57
SUB (298) 58 64 66
LT (299) 53
LTE (300) 55
GT (301) 54
GTE (302) 56
EQ (303) 51
NEQ (304) 52
NOT (305) 45
NUMBER (306) 15 66 67
IDENT (307) 3 16 17 32 37 38 69 70


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 1 2, on right: 0 1
function (55)
    on left: 3, on right: 1 2
function_chunk_a (56)
    on left: 4 5, on right: 3
function_chunk_b (57)
    on left: 6 7, on right: 3
function_chunk_c (58)
    on left: 8 9, on right: 3
declaration_s (59)
    on left: 10 11, on right: 4 6 10
statement_ns (60)
    on left: 12 13, on right: 8 12 28 29 30 31 32
declaration (61)
    on left: 14 15, on right: 10 11
identifier_ns (62)
    on left: 16 17, on right: 14 15 16
statement (63)
    on left: 18 19 20 21 22 23 24 25 26, on right: 12 13
a_statement (64)
    on left: 27, on right: 18
b_statement (65)
    on left: 28 29, on right: 19
c_statement (66)
    on left: 30, on right: 20
d_statement (67)
    on left: 31, on right: 21
e_statement (68)
    on left: 32, on right: 22
f_statement (69)
    on left: 33, on right: 23
g_statement (70)
    on left: 34, on right: 24
h_statement (71)
    on left: 35, on right: 25
i_statement (72)
    on left: 36, on right: 26
var (73)
    on left: 37 38, on right: 27 33 34 40 64 65
var_ns (74)
    on left: 39 40, on right: 33 34 40
bool_expr (75)
    on left: 41 42, on right: 28 29 30 31 42 50
relation_and_expr (76)
    on left: 43 44, on right: 41 42 44
relation_expr (77)
    on left: 45 46, on right: 43 44
rexpr (78)
    on left: 47 48 49 50, on right: 45 46
comp (79)
    on left: 51 52 53 54 55 56, on right: 47
expression (80)
    on left: 57 58 59, on right: 27 36 38 47 68 69 71
multiplicative_expr (81)
    on left: 60 61 62 63, on right: 57 58 59 60 61 62
term (82)
    on left: 64 65 66 67 68 69 70, on right: 60 61 62 63
exp_s (83)
    on left: 71 72, on right: 69 71


State 0

    0 $accept: . program $end

    FUNCTION  shift, and go to state 1

    program   go to state 2
    function  go to state 3


State 1

    3 function: FUNCTION . IDENT SEMICOLON function_chunk_a function_chunk_b function_chunk_c

    IDENT  shift, and go to state 4


State 2

    0 $accept: program . $end
    1 program: program . function

    $end      shift, and go to state 5
    FUNCTION  shift, and go to state 1

    function  go to state 6


State 3

    2 program: function .

    $default  reduce using rule 2 (program)


State 4

    3 function: FUNCTION IDENT . SEMICOLON function_chunk_a function_chunk_b function_chunk_c

    SEMICOLON  shift, and go to state 7


State 5

    0 $accept: program $end .

    $default  accept


State 6

    1 program: program function .

    $default  reduce using rule 1 (program)


State 7

    3 function: FUNCTION IDENT SEMICOLON . function_chunk_a function_chunk_b function_chunk_c

    BEGIN_PARAMS  shift, and go to state 8

    function_chunk_a  go to state 9


State 8

    4 function_chunk_a: BEGIN_PARAMS . declaration_s END_PARAMS
    5                 | BEGIN_PARAMS . END_PARAMS

    END_PARAMS  shift, and go to state 10
    IDENT       shift, and go to state 11

    declaration_s  go to state 12
    declaration    go to state 13
    identifier_ns  go to state 14


State 9

    3 function: FUNCTION IDENT SEMICOLON function_chunk_a . function_chunk_b function_chunk_c

    BEGIN_LOCALS  shift, and go to state 15

    function_chunk_b  go to state 16


State 10

    5 function_chunk_a: BEGIN_PARAMS END_PARAMS .

    $default  reduce using rule 5 (function_chunk_a)


State 11

   16 identifier_ns: IDENT . COMMA identifier_ns
   17              | IDENT .

    COMMA  shift, and go to state 17

    $default  reduce using rule 17 (identifier_ns)


State 12

    4 function_chunk_a: BEGIN_PARAMS declaration_s . END_PARAMS

    END_PARAMS  shift, and go to state 18


State 13

   10 declaration_s: declaration . SEMICOLON declaration_s
   11              | declaration . SEMICOLON

    SEMICOLON  shift, and go to state 19


State 14

   14 declaration: identifier_ns . COLON INTEGER
   15            | identifier_ns . COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    COLON  shift, and go to state 20


State 15

    6 function_chunk_b: BEGIN_LOCALS . declaration_s END_LOCALS
    7                 | BEGIN_LOCALS . END_LOCALS

    END_LOCALS  shift, and go to state 21
    IDENT       shift, and go to state 11

    declaration_s  go to state 22
    declaration    go to state 13
    identifier_ns  go to state 14


State 16

    3 function: FUNCTION IDENT SEMICOLON function_chunk_a function_chunk_b . function_chunk_c

    BEGIN_BODY  shift, and go to state 23

    function_chunk_c  go to state 24


State 17

   16 identifier_ns: IDENT COMMA . identifier_ns

    IDENT  shift, and go to state 11

    identifier_ns  go to state 25


State 18

    4 function_chunk_a: BEGIN_PARAMS declaration_s END_PARAMS .

    $default  reduce using rule 4 (function_chunk_a)


State 19

   10 declaration_s: declaration SEMICOLON . declaration_s
   11              | declaration SEMICOLON .

    IDENT  shift, and go to state 11

    $default  reduce using rule 11 (declaration_s)

    declaration_s  go to state 26
    declaration    go to state 13
    identifier_ns  go to state 14


State 20

   14 declaration: identifier_ns COLON . INTEGER
   15            | identifier_ns COLON . ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    INTEGER  shift, and go to state 27
    ARRAY    shift, and go to state 28


State 21

    7 function_chunk_b: BEGIN_LOCALS END_LOCALS .

    $default  reduce using rule 7 (function_chunk_b)


State 22

    6 function_chunk_b: BEGIN_LOCALS declaration_s . END_LOCALS

    END_LOCALS  shift, and go to state 29


State 23

    8 function_chunk_c: BEGIN_BODY . statement_ns END_BODY
    9                 | BEGIN_BODY . END_BODY

    END_BODY  shift, and go to state 30
    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    FOREACH   shift, and go to state 34
    CONTINUE  shift, and go to state 35
    READ      shift, and go to state 36
    WRITE     shift, and go to state 37
    RETURN    shift, and go to state 38
    IDENT     shift, and go to state 39

    statement_ns  go to state 40
    statement     go to state 41
    a_statement   go to state 42
    b_statement   go to state 43
    c_statement   go to state 44
    d_statement   go to state 45
    e_statement   go to state 46
    f_statement   go to state 47
    g_statement   go to state 48
    h_statement   go to state 49
    i_statement   go to state 50
    var           go to state 51


State 24

    3 function: FUNCTION IDENT SEMICOLON function_chunk_a function_chunk_b function_chunk_c .

    $default  reduce using rule 3 (function)


State 25

   16 identifier_ns: IDENT COMMA identifier_ns .

    $default  reduce using rule 16 (identifier_ns)


State 26

   10 declaration_s: declaration SEMICOLON declaration_s .

    $default  reduce using rule 10 (declaration_s)


State 27

   14 declaration: identifier_ns COLON INTEGER .

    $default  reduce using rule 14 (declaration)


State 28

   15 declaration: identifier_ns COLON ARRAY . L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    L_SQUARE_BRACKET  shift, and go to state 52


State 29

    6 function_chunk_b: BEGIN_LOCALS declaration_s END_LOCALS .

    $default  reduce using rule 6 (function_chunk_b)


State 30

    9 function_chunk_c: BEGIN_BODY END_BODY .

    $default  reduce using rule 9 (function_chunk_c)


State 31

   28 b_statement: IF . bool_expr THEN statement_ns ENDIF
   29            | IF . bool_expr THEN ELSE statement_ns ENDIF

    TRUE     shift, and go to state 53
    FALSE    shift, and go to state 54
    L_PAREN  shift, and go to state 55
    SUB      shift, and go to state 56
    NOT      shift, and go to state 57
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    bool_expr            go to state 61
    relation_and_expr    go to state 62
    relation_expr        go to state 63
    rexpr                go to state 64
    expression           go to state 65
    multiplicative_expr  go to state 66
    term                 go to state 67


State 32

   30 c_statement: WHILE . bool_expr BEGINLOOP statement_ns ENDLOOP

    TRUE     shift, and go to state 53
    FALSE    shift, and go to state 54
    L_PAREN  shift, and go to state 55
    SUB      shift, and go to state 56
    NOT      shift, and go to state 57
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    bool_expr            go to state 68
    relation_and_expr    go to state 62
    relation_expr        go to state 63
    rexpr                go to state 64
    expression           go to state 65
    multiplicative_expr  go to state 66
    term                 go to state 67


State 33

   31 d_statement: DO . BEGINLOOP statement_ns ENDLOOP WHILE bool_expr

    BEGINLOOP  shift, and go to state 69


State 34

   32 e_statement: FOREACH . IDENT IN IDENT BEGINLOOP statement_ns ENDLOOP

    IDENT  shift, and go to state 70


State 35

   35 h_statement: CONTINUE .

    $default  reduce using rule 35 (h_statement)


State 36

   33 f_statement: READ . var var_ns

    IDENT  shift, and go to state 39

    var  go to state 71


State 37

   34 g_statement: WRITE . var var_ns

    IDENT  shift, and go to state 39

    var  go to state 72


State 38

   36 i_statement: RETURN . expression

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    expression           go to state 74
    multiplicative_expr  go to state 66
    term                 go to state 67


State 39

   37 var: IDENT .
   38    | IDENT . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 75

    $default  reduce using rule 37 (var)


State 40

    8 function_chunk_c: BEGIN_BODY statement_ns . END_BODY

    END_BODY  shift, and go to state 76


State 41

   12 statement_ns: statement . SEMICOLON statement_ns
   13             | statement . SEMICOLON

    SEMICOLON  shift, and go to state 77


State 42

   18 statement: a_statement .

    $default  reduce using rule 18 (statement)


State 43

   19 statement: b_statement .

    $default  reduce using rule 19 (statement)


State 44

   20 statement: c_statement .

    $default  reduce using rule 20 (statement)


State 45

   21 statement: d_statement .

    $default  reduce using rule 21 (statement)


State 46

   22 statement: e_statement .

    $default  reduce using rule 22 (statement)


State 47

   23 statement: f_statement .

    $default  reduce using rule 23 (statement)


State 48

   24 statement: g_statement .

    $default  reduce using rule 24 (statement)


State 49

   25 statement: h_statement .

    $default  reduce using rule 25 (statement)


State 50

   26 statement: i_statement .

    $default  reduce using rule 26 (statement)


State 51

   27 a_statement: var . ASSIGN expression

    ASSIGN  shift, and go to state 78


State 52

   15 declaration: identifier_ns COLON ARRAY L_SQUARE_BRACKET . NUMBER R_SQUARE_BRACKET OF INTEGER

    NUMBER  shift, and go to state 79


State 53

   48 rexpr: TRUE .

    $default  reduce using rule 48 (rexpr)


State 54

   49 rexpr: FALSE .

    $default  reduce using rule 49 (rexpr)


State 55

   50 rexpr: L_PAREN . bool_expr R_PAREN
   68 term: L_PAREN . expression R_PAREN

    TRUE     shift, and go to state 53
    FALSE    shift, and go to state 54
    L_PAREN  shift, and go to state 55
    SUB      shift, and go to state 56
    NOT      shift, and go to state 57
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    bool_expr            go to state 80
    relation_and_expr    go to state 62
    relation_expr        go to state 63
    rexpr                go to state 64
    expression           go to state 81
    multiplicative_expr  go to state 66
    term                 go to state 67


State 56

   64 term: SUB . var
   66     | SUB . NUMBER

    NUMBER  shift, and go to state 82
    IDENT   shift, and go to state 39

    var  go to state 83


State 57

   45 relation_expr: NOT . rexpr

    TRUE     shift, and go to state 53
    FALSE    shift, and go to state 54
    L_PAREN  shift, and go to state 55
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    rexpr                go to state 84
    expression           go to state 65
    multiplicative_expr  go to state 66
    term                 go to state 67


State 58

   67 term: NUMBER .

    $default  reduce using rule 67 (term)


State 59

   37 var: IDENT .
   38    | IDENT . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
   69 term: IDENT . L_PAREN expression exp_s R_PAREN
   70     | IDENT . L_PAREN R_PAREN

    L_PAREN           shift, and go to state 85
    L_SQUARE_BRACKET  shift, and go to state 75

    $default  reduce using rule 37 (var)


State 60

   65 term: var .

    $default  reduce using rule 65 (term)


State 61

   28 b_statement: IF bool_expr . THEN statement_ns ENDIF
   29            | IF bool_expr . THEN ELSE statement_ns ENDIF

    THEN  shift, and go to state 86


State 62

   41 bool_expr: relation_and_expr .
   42          | relation_and_expr . OR bool_expr

    OR  shift, and go to state 87

    $default  reduce using rule 41 (bool_expr)


State 63

   43 relation_and_expr: relation_expr .
   44                  | relation_expr . AND relation_and_expr

    AND  shift, and go to state 88

    $default  reduce using rule 43 (relation_and_expr)


State 64

   46 relation_expr: rexpr .

    $default  reduce using rule 46 (relation_expr)


State 65

   47 rexpr: expression . comp expression

    LT   shift, and go to state 89
    LTE  shift, and go to state 90
    GT   shift, and go to state 91
    GTE  shift, and go to state 92
    EQ   shift, and go to state 93
    NEQ  shift, and go to state 94

    comp  go to state 95


State 66

   57 expression: multiplicative_expr . ADD multiplicative_expr
   58           | multiplicative_expr . SUB multiplicative_expr
   59           | multiplicative_expr .
   60 multiplicative_expr: multiplicative_expr . MULT term
   61                    | multiplicative_expr . DIV term
   62                    | multiplicative_expr . MOD term

    MULT  shift, and go to state 96
    DIV   shift, and go to state 97
    MOD   shift, and go to state 98
    ADD   shift, and go to state 99
    SUB   shift, and go to state 100

    $default  reduce using rule 59 (expression)


State 67

   63 multiplicative_expr: term .

    $default  reduce using rule 63 (multiplicative_expr)


State 68

   30 c_statement: WHILE bool_expr . BEGINLOOP statement_ns ENDLOOP

    BEGINLOOP  shift, and go to state 101


State 69

   31 d_statement: DO BEGINLOOP . statement_ns ENDLOOP WHILE bool_expr

    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    FOREACH   shift, and go to state 34
    CONTINUE  shift, and go to state 35
    READ      shift, and go to state 36
    WRITE     shift, and go to state 37
    RETURN    shift, and go to state 38
    IDENT     shift, and go to state 39

    statement_ns  go to state 102
    statement     go to state 41
    a_statement   go to state 42
    b_statement   go to state 43
    c_statement   go to state 44
    d_statement   go to state 45
    e_statement   go to state 46
    f_statement   go to state 47
    g_statement   go to state 48
    h_statement   go to state 49
    i_statement   go to state 50
    var           go to state 51


State 70

   32 e_statement: FOREACH IDENT . IN IDENT BEGINLOOP statement_ns ENDLOOP

    IN  shift, and go to state 103


State 71

   33 f_statement: READ var . var_ns

    COMMA  shift, and go to state 104

    $default  reduce using rule 39 (var_ns)

    var_ns  go to state 105


State 72

   34 g_statement: WRITE var . var_ns

    COMMA  shift, and go to state 104

    $default  reduce using rule 39 (var_ns)

    var_ns  go to state 106


State 73

   68 term: L_PAREN . expression R_PAREN

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    expression           go to state 107
    multiplicative_expr  go to state 66
    term                 go to state 67


State 74

   36 i_statement: RETURN expression .

    $default  reduce using rule 36 (i_statement)


State 75

   38 var: IDENT L_SQUARE_BRACKET . expression R_SQUARE_BRACKET

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    expression           go to state 108
    multiplicative_expr  go to state 66
    term                 go to state 67


State 76

    8 function_chunk_c: BEGIN_BODY statement_ns END_BODY .

    $default  reduce using rule 8 (function_chunk_c)


State 77

   12 statement_ns: statement SEMICOLON . statement_ns
   13             | statement SEMICOLON .

    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    FOREACH   shift, and go to state 34
    CONTINUE  shift, and go to state 35
    READ      shift, and go to state 36
    WRITE     shift, and go to state 37
    RETURN    shift, and go to state 38
    IDENT     shift, and go to state 39

    $default  reduce using rule 13 (statement_ns)

    statement_ns  go to state 109
    statement     go to state 41
    a_statement   go to state 42
    b_statement   go to state 43
    c_statement   go to state 44
    d_statement   go to state 45
    e_statement   go to state 46
    f_statement   go to state 47
    g_statement   go to state 48
    h_statement   go to state 49
    i_statement   go to state 50
    var           go to state 51


State 78

   27 a_statement: var ASSIGN . expression

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    expression           go to state 110
    multiplicative_expr  go to state 66
    term                 go to state 67


State 79

   15 declaration: identifier_ns COLON ARRAY L_SQUARE_BRACKET NUMBER . R_SQUARE_BRACKET OF INTEGER

    R_SQUARE_BRACKET  shift, and go to state 111


State 80

   50 rexpr: L_PAREN bool_expr . R_PAREN

    R_PAREN  shift, and go to state 112


State 81

   47 rexpr: expression . comp expression
   68 term: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 113
    LT       shift, and go to state 89
    LTE      shift, and go to state 90
    GT       shift, and go to state 91
    GTE      shift, and go to state 92
    EQ       shift, and go to state 93
    NEQ      shift, and go to state 94

    comp  go to state 95


State 82

   66 term: SUB NUMBER .

    $default  reduce using rule 66 (term)


State 83

   64 term: SUB var .

    $default  reduce using rule 64 (term)


State 84

   45 relation_expr: NOT rexpr .

    $default  reduce using rule 45 (relation_expr)


State 85

   69 term: IDENT L_PAREN . expression exp_s R_PAREN
   70     | IDENT L_PAREN . R_PAREN

    L_PAREN  shift, and go to state 73
    R_PAREN  shift, and go to state 114
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    expression           go to state 115
    multiplicative_expr  go to state 66
    term                 go to state 67


State 86

   28 b_statement: IF bool_expr THEN . statement_ns ENDIF
   29            | IF bool_expr THEN . ELSE statement_ns ENDIF

    IF        shift, and go to state 31
    ELSE      shift, and go to state 116
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    FOREACH   shift, and go to state 34
    CONTINUE  shift, and go to state 35
    READ      shift, and go to state 36
    WRITE     shift, and go to state 37
    RETURN    shift, and go to state 38
    IDENT     shift, and go to state 39

    statement_ns  go to state 117
    statement     go to state 41
    a_statement   go to state 42
    b_statement   go to state 43
    c_statement   go to state 44
    d_statement   go to state 45
    e_statement   go to state 46
    f_statement   go to state 47
    g_statement   go to state 48
    h_statement   go to state 49
    i_statement   go to state 50
    var           go to state 51


State 87

   42 bool_expr: relation_and_expr OR . bool_expr

    TRUE     shift, and go to state 53
    FALSE    shift, and go to state 54
    L_PAREN  shift, and go to state 55
    SUB      shift, and go to state 56
    NOT      shift, and go to state 57
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    bool_expr            go to state 118
    relation_and_expr    go to state 62
    relation_expr        go to state 63
    rexpr                go to state 64
    expression           go to state 65
    multiplicative_expr  go to state 66
    term                 go to state 67


State 88

   44 relation_and_expr: relation_expr AND . relation_and_expr

    TRUE     shift, and go to state 53
    FALSE    shift, and go to state 54
    L_PAREN  shift, and go to state 55
    SUB      shift, and go to state 56
    NOT      shift, and go to state 57
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    relation_and_expr    go to state 119
    relation_expr        go to state 63
    rexpr                go to state 64
    expression           go to state 65
    multiplicative_expr  go to state 66
    term                 go to state 67


State 89

   53 comp: LT .

    $default  reduce using rule 53 (comp)


State 90

   55 comp: LTE .

    $default  reduce using rule 55 (comp)


State 91

   54 comp: GT .

    $default  reduce using rule 54 (comp)


State 92

   56 comp: GTE .

    $default  reduce using rule 56 (comp)


State 93

   51 comp: EQ .

    $default  reduce using rule 51 (comp)


State 94

   52 comp: NEQ .

    $default  reduce using rule 52 (comp)


State 95

   47 rexpr: expression comp . expression

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    expression           go to state 120
    multiplicative_expr  go to state 66
    term                 go to state 67


State 96

   60 multiplicative_expr: multiplicative_expr MULT . term

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var   go to state 60
    term  go to state 121


State 97

   61 multiplicative_expr: multiplicative_expr DIV . term

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var   go to state 60
    term  go to state 122


State 98

   62 multiplicative_expr: multiplicative_expr MOD . term

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var   go to state 60
    term  go to state 123


State 99

   57 expression: multiplicative_expr ADD . multiplicative_expr

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    multiplicative_expr  go to state 124
    term                 go to state 67


State 100

   58 expression: multiplicative_expr SUB . multiplicative_expr

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    multiplicative_expr  go to state 125
    term                 go to state 67


State 101

   30 c_statement: WHILE bool_expr BEGINLOOP . statement_ns ENDLOOP

    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    FOREACH   shift, and go to state 34
    CONTINUE  shift, and go to state 35
    READ      shift, and go to state 36
    WRITE     shift, and go to state 37
    RETURN    shift, and go to state 38
    IDENT     shift, and go to state 39

    statement_ns  go to state 126
    statement     go to state 41
    a_statement   go to state 42
    b_statement   go to state 43
    c_statement   go to state 44
    d_statement   go to state 45
    e_statement   go to state 46
    f_statement   go to state 47
    g_statement   go to state 48
    h_statement   go to state 49
    i_statement   go to state 50
    var           go to state 51


State 102

   31 d_statement: DO BEGINLOOP statement_ns . ENDLOOP WHILE bool_expr

    ENDLOOP  shift, and go to state 127


State 103

   32 e_statement: FOREACH IDENT IN . IDENT BEGINLOOP statement_ns ENDLOOP

    IDENT  shift, and go to state 128


State 104

   40 var_ns: COMMA . var var_ns

    IDENT  shift, and go to state 39

    var  go to state 129


State 105

   33 f_statement: READ var var_ns .

    $default  reduce using rule 33 (f_statement)


State 106

   34 g_statement: WRITE var var_ns .

    $default  reduce using rule 34 (g_statement)


State 107

   68 term: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 113


State 108

   38 var: IDENT L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 130


State 109

   12 statement_ns: statement SEMICOLON statement_ns .

    $default  reduce using rule 12 (statement_ns)


State 110

   27 a_statement: var ASSIGN expression .

    $default  reduce using rule 27 (a_statement)


State 111

   15 declaration: identifier_ns COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET . OF INTEGER

    OF  shift, and go to state 131


State 112

   50 rexpr: L_PAREN bool_expr R_PAREN .

    $default  reduce using rule 50 (rexpr)


State 113

   68 term: L_PAREN expression R_PAREN .

    $default  reduce using rule 68 (term)


State 114

   70 term: IDENT L_PAREN R_PAREN .

    $default  reduce using rule 70 (term)


State 115

   69 term: IDENT L_PAREN expression . exp_s R_PAREN

    COMMA  shift, and go to state 132

    $default  reduce using rule 72 (exp_s)

    exp_s  go to state 133


State 116

   29 b_statement: IF bool_expr THEN ELSE . statement_ns ENDIF

    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    FOREACH   shift, and go to state 34
    CONTINUE  shift, and go to state 35
    READ      shift, and go to state 36
    WRITE     shift, and go to state 37
    RETURN    shift, and go to state 38
    IDENT     shift, and go to state 39

    statement_ns  go to state 134
    statement     go to state 41
    a_statement   go to state 42
    b_statement   go to state 43
    c_statement   go to state 44
    d_statement   go to state 45
    e_statement   go to state 46
    f_statement   go to state 47
    g_statement   go to state 48
    h_statement   go to state 49
    i_statement   go to state 50
    var           go to state 51


State 117

   28 b_statement: IF bool_expr THEN statement_ns . ENDIF

    ENDIF  shift, and go to state 135


State 118

   42 bool_expr: relation_and_expr OR bool_expr .

    $default  reduce using rule 42 (bool_expr)


State 119

   44 relation_and_expr: relation_expr AND relation_and_expr .

    $default  reduce using rule 44 (relation_and_expr)


State 120

   47 rexpr: expression comp expression .

    $default  reduce using rule 47 (rexpr)


State 121

   60 multiplicative_expr: multiplicative_expr MULT term .

    $default  reduce using rule 60 (multiplicative_expr)


State 122

   61 multiplicative_expr: multiplicative_expr DIV term .

    $default  reduce using rule 61 (multiplicative_expr)


State 123

   62 multiplicative_expr: multiplicative_expr MOD term .

    $default  reduce using rule 62 (multiplicative_expr)


State 124

   57 expression: multiplicative_expr ADD multiplicative_expr .
   60 multiplicative_expr: multiplicative_expr . MULT term
   61                    | multiplicative_expr . DIV term
   62                    | multiplicative_expr . MOD term

    MULT  shift, and go to state 96
    DIV   shift, and go to state 97
    MOD   shift, and go to state 98

    $default  reduce using rule 57 (expression)


State 125

   58 expression: multiplicative_expr SUB multiplicative_expr .
   60 multiplicative_expr: multiplicative_expr . MULT term
   61                    | multiplicative_expr . DIV term
   62                    | multiplicative_expr . MOD term

    MULT  shift, and go to state 96
    DIV   shift, and go to state 97
    MOD   shift, and go to state 98

    $default  reduce using rule 58 (expression)


State 126

   30 c_statement: WHILE bool_expr BEGINLOOP statement_ns . ENDLOOP

    ENDLOOP  shift, and go to state 136


State 127

   31 d_statement: DO BEGINLOOP statement_ns ENDLOOP . WHILE bool_expr

    WHILE  shift, and go to state 137


State 128

   32 e_statement: FOREACH IDENT IN IDENT . BEGINLOOP statement_ns ENDLOOP

    BEGINLOOP  shift, and go to state 138


State 129

   40 var_ns: COMMA var . var_ns

    COMMA  shift, and go to state 104

    $default  reduce using rule 39 (var_ns)

    var_ns  go to state 139


State 130

   38 var: IDENT L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    $default  reduce using rule 38 (var)


State 131

   15 declaration: identifier_ns COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 140


State 132

   71 exp_s: COMMA . expression exp_s

    L_PAREN  shift, and go to state 73
    SUB      shift, and go to state 56
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    expression           go to state 141
    multiplicative_expr  go to state 66
    term                 go to state 67


State 133

   69 term: IDENT L_PAREN expression exp_s . R_PAREN

    R_PAREN  shift, and go to state 142


State 134

   29 b_statement: IF bool_expr THEN ELSE statement_ns . ENDIF

    ENDIF  shift, and go to state 143


State 135

   28 b_statement: IF bool_expr THEN statement_ns ENDIF .

    $default  reduce using rule 28 (b_statement)


State 136

   30 c_statement: WHILE bool_expr BEGINLOOP statement_ns ENDLOOP .

    $default  reduce using rule 30 (c_statement)


State 137

   31 d_statement: DO BEGINLOOP statement_ns ENDLOOP WHILE . bool_expr

    TRUE     shift, and go to state 53
    FALSE    shift, and go to state 54
    L_PAREN  shift, and go to state 55
    SUB      shift, and go to state 56
    NOT      shift, and go to state 57
    NUMBER   shift, and go to state 58
    IDENT    shift, and go to state 59

    var                  go to state 60
    bool_expr            go to state 144
    relation_and_expr    go to state 62
    relation_expr        go to state 63
    rexpr                go to state 64
    expression           go to state 65
    multiplicative_expr  go to state 66
    term                 go to state 67


State 138

   32 e_statement: FOREACH IDENT IN IDENT BEGINLOOP . statement_ns ENDLOOP

    IF        shift, and go to state 31
    WHILE     shift, and go to state 32
    DO        shift, and go to state 33
    FOREACH   shift, and go to state 34
    CONTINUE  shift, and go to state 35
    READ      shift, and go to state 36
    WRITE     shift, and go to state 37
    RETURN    shift, and go to state 38
    IDENT     shift, and go to state 39

    statement_ns  go to state 145
    statement     go to state 41
    a_statement   go to state 42
    b_statement   go to state 43
    c_statement   go to state 44
    d_statement   go to state 45
    e_statement   go to state 46
    f_statement   go to state 47
    g_statement   go to state 48
    h_statement   go to state 49
    i_statement   go to state 50
    var           go to state 51


State 139

   40 var_ns: COMMA var var_ns .

    $default  reduce using rule 40 (var_ns)


State 140

   15 declaration: identifier_ns COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER .

    $default  reduce using rule 15 (declaration)


State 141

   71 exp_s: COMMA expression . exp_s

    COMMA  shift, and go to state 132

    $default  reduce using rule 72 (exp_s)

    exp_s  go to state 146


State 142

   69 term: IDENT L_PAREN expression exp_s R_PAREN .

    $default  reduce using rule 69 (term)


State 143

   29 b_statement: IF bool_expr THEN ELSE statement_ns ENDIF .

    $default  reduce using rule 29 (b_statement)


State 144

   31 d_statement: DO BEGINLOOP statement_ns ENDLOOP WHILE bool_expr .

    $default  reduce using rule 31 (d_statement)


State 145

   32 e_statement: FOREACH IDENT IN IDENT BEGINLOOP statement_ns . ENDLOOP

    ENDLOOP  shift, and go to state 147


State 146

   71 exp_s: COMMA expression exp_s .

    $default  reduce using rule 71 (exp_s)


State 147

   32 e_statement: FOREACH IDENT IN IDENT BEGINLOOP statement_ns ENDLOOP .

    $default  reduce using rule 32 (e_statement)
