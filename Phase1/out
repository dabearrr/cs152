please input stuff
##  IDENT primes.IDENT minCOLON IDENT compute IDENT primes IDENT using IDENT Sieve OF IDENT Eratosthenes
##  L_PARENIDENT httpCOLONDIVDIVIDENT en.IDENT wikipedia.IDENT orgDIVIDENT wikiDIVIDENT Sieve_of_EratosthenesR_PAREN
##
##  IDENT Compute IDENT primes IDENT up IDENT to IDENT a IDENT specified IDENT n IDENT by IDENT crossing IDENT out IDENT multiples OF IDENT successively
##  IDENT larger IDENT primes IDENT in IDENT a IDENT boolean ARRAY.  IDENT The ARRAY IDENT stores IDENT a[k] = NUMBER 1 IF IDENT k IDENT is IDENT composite
##  L_PARENNOT IDENT primeR_PARENCOMMA AND IDENT a[k] = NUMBER 0 IF IDENT k IDENT is NOT IDENT divisible IDENT by IDENT the IDENT divisors IDENT considered
##  IDENT thus IDENT far.
## 
##  IDENT Requires IDENT a IDENT specified INTEGER IDENT n IDENT as IDENT inputCOMMA IDENT assumed IDENT to IDENT be LT NUMBER 1000.

FUNCTION IDENT mainSEMICOLON
BEGIN_PARAMS
END_PARAMS

BEGIN_LOCALS

IDENT n COLON INTEGERSEMICOLON
IDENT a COLON IDENT array[1000] OF INTEGERSEMICOLON	## IDENT prime IDENT candidates ARRAY
IDENT iCOMMA IDENT j COLON INTEGERSEMICOLON
IDENT xCOMMA IDENT sqrt_n COLON INTEGERSEMICOLON

END_LOCALS

BEGIN_BODY	## IDENT main IDENT program
    ## IDENT compute IDENT the IDENT square IDENT root OF IDENT n AND IDENT put IDENT the IDENT result IDENT in IDENT sqrt_n
    READ IDENT nSEMICOLON
    IDENT x ASSIGN IDENT nSEMICOLON
    WHILE IDENT x GT IDENT n DIV IDENT x BEGINLOOP
	    IDENT x ASSIGN L_PARENIDENT xADDIDENT n DIV IDENT xR_PAREN DIV NUMBER 2SEMICOLON
    ENDLOOPSEMICOLON
    IDENT sqrt_n ASSIGN IDENT xSEMICOLON

    ## IDENT initialization OF IDENT the ARRAY
    IDENT i ASSIGN NUMBER 2SEMICOLON
    WHILE IDENT i LTE IDENT n BEGINLOOP
	    IDENT a[i] ASSIGN NUMBER 0SEMICOLON
	    IDENT i ASSIGN IDENT i ADD NUMBER 1SEMICOLON
    ENDLOOPSEMICOLON

    ## IDENT make IDENT the ARRAY
    IDENT i ASSIGN NUMBER 2SEMICOLON
    WHILE IDENT i LTE IDENT sqrt_n BEGINLOOP
	    IF IDENT a[i] EQ NUMBER 0 THEN
          ## IDENT i IDENT primeCOMMA IDENT so IDENT eliminate IDENT its IDENT multiples
	       IDENT j ASSIGN IDENT iADDIDENT iSEMICOLON
	       WHILE IDENT j LTE IDENT n BEGINLOOP
		       IDENT a[j] ASSIGN NUMBER 1SEMICOLON
		       IDENT j ASSIGN IDENT jADDIDENT iSEMICOLON
	       ENDLOOPSEMICOLON
       ENDIFSEMICOLON
       IDENT i ASSIGN IDENT i ADD NUMBER 1SEMICOLON
    ENDLOOPSEMICOLON

    ## IDENT print IDENT primes
    IDENT i ASSIGN NUMBER 2SEMICOLON
    WHILE IDENT i LTE IDENT n BEGINLOOP
	    IF IDENT a[i] EQ NUMBER 0 THEN
	       WRITE IDENT iSEMICOLON
       ENDIFSEMICOLON
       IDENT i ASSIGN IDENT i ADD NUMBER 1SEMICOLON
   ENDLOOPSEMICOLON
END_BODY
