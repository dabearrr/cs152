Grammar

    0 $accept: program $end

    1 program: program function
    2        | function

    3 function: FUNCTION IDENT SEMICOLON function_chunk_a function_chunk_b function_chunk_c

    4 function_chunk_a: BEGIN_PARAMS declaration_s END_PARAMS
    5                 | BEGIN_PARAMS END_PARAMS

    6 function_chunk_b: BEGIN_LOCALS declaration_s END_LOCALS
    7                 | BEGIN_LOCALS END_LOCALS

    8 function_chunk_c: BEGIN_BODY statement_ns END_BODY
    9                 | BEGIN_BODY END_BODY

   10 declaration_s: declaration SEMICOLON declaration_s
   11              | declaration SEMICOLON

   12 statement_ns: statement SEMICOLON statement_ns
   13             | statement SEMICOLON

   14 declaration: identifier_ns COLON arrayint

   15 identifier_ns: IDENT COMMA identifier_ns
   16              | IDENT

   17 arrayint: INTEGER
   18         | ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

   19 statement: a_statement
   20          | b_statement
   21          | c_statement
   22          | d_statement
   23          | e_statement
   24          | f_statement
   25          | g_statement
   26          | h_statement
   27          | i_statement

   28 a_statement: var ASSIGN expression

   29 b_statement: IF bool_expr THEN statement_ns ENDIF
   30            | IF bool_expr THEN ELSE statement_ns ENDIF

   31 c_statement: WHILE bool_expr BEGINLOOP statement_ns ENDLOOP

   32 d_statement: DO BEGINLOOP statement_ns ENDLOOP WHILE bool_expr

   33 e_statement: FOREACH IDENT IN IDENT BEGINLOOP statement_ns ENDLOOP

   34 f_statement: READ var_ns

   35 g_statement: WRITE var_ns

   36 h_statement: CONTINUE

   37 i_statement: RETURN expression

   38 var: IDENT
   39    | IDENT L_SQUARE_BRACKET expression R_SQUARE_BRACKET

   40 var_ns: var COMMA var_ns
   41       | var

   42 bool_expr: relation_and_expr
   43          | relation_and_expr OR bool_expr

   44 relation_and_expr: relation_expr
   45                  | relation_expr AND relation_and_expr

   46 relation_expr: NOT rexpr
   47              | rexpr

   48 rexpr: expression comp expression
   49      | TRUE
   50      | FALSE
   51      | L_PAREN bool_expr R_PAREN

   52 comp: EQ
   53     | NEQ
   54     | LT
   55     | GT
   56     | LTE
   57     | GTE

   58 expression: multiplicative_expr exprsum_s
   59           | multiplicative_expr

   60 exprsum_s: exprsum exprsum_s
   61          | exprsum

   62 exprsum: ADD multiplicative_expr
   63        | SUB multiplicative_expr

   64 multiplicative_expr: term term_s
   65                    | term

   66 term_s: MULT term term_s
   67       | MULT term
   68       | DIV term term_s
   69       | DIV term
   70       | MOD term term_s
   71       | MOD term

   72 term: upterm
   73     | SUB upterm
   74     | IDENT termidentifier

   75 upterm: var
   76       | NUMBER
   77       | L_PAREN expression R_PAREN

   78 termidentifier: L_PAREN termexpression R_PAREN
   79               | L_PAREN R_PAREN

   80 termexpression: expression
   81               | expression COMMA termexpression


Terminals, with rules where they appear

$end (0) 0
error (256)
FUNCTION (258) 3
BEGIN_PARAMS (259) 4 5
END_PARAMS (260) 4 5
BEGIN_LOCALS (261) 6 7
END_LOCALS (262) 6 7
BEGIN_BODY (263) 8 9
END_BODY (264) 8 9
INTEGER (265) 17 18
ARRAY (266) 18
OF (267) 18
IF (268) 29 30
THEN (269) 29 30
ENDIF (270) 29 30
ELSE (271) 30
WHILE (272) 31 32
DO (273) 32
FOREACH (274) 33
IN (275) 33
BEGINLOOP (276) 31 32 33
ENDLOOP (277) 31 32 33
CONTINUE (278) 36
READ (279) 34
WRITE (280) 35
TRUE (281) 49
FALSE (282) 50
SEMICOLON (283) 3 10 11 12 13
COLON (284) 14
COMMA (285) 15 40 81
ASSIGN (286) 28
RETURN (287) 37
AND (288) 45
OR (289) 43
NUMBER (290) 18 76
IDENT (291) 3 15 16 33 38 39 74
L_PAREN (292) 51 77 78 79
R_PAREN (293) 51 77 78 79
L_SQUARE_BRACKET (294) 18 39
R_SQUARE_BRACKET (295) 18 39
MULT (296) 66 67
DIV (297) 68 69
MOD (298) 70 71
ADD (299) 62
SUB (300) 63 73
LT (301) 54
LTE (302) 56
GT (303) 55
GTE (304) 57
EQ (305) 52
NEQ (306) 53
NOT (307) 46


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 1 2, on right: 0 1
function (55)
    on left: 3, on right: 1 2
function_chunk_a (56)
    on left: 4 5, on right: 3
function_chunk_b (57)
    on left: 6 7, on right: 3
function_chunk_c (58)
    on left: 8 9, on right: 3
declaration_s (59)
    on left: 10 11, on right: 4 6 10
statement_ns (60)
    on left: 12 13, on right: 8 12 29 30 31 32 33
declaration (61)
    on left: 14, on right: 10 11
identifier_ns (62)
    on left: 15 16, on right: 14 15
arrayint (63)
    on left: 17 18, on right: 14
statement (64)
    on left: 19 20 21 22 23 24 25 26 27, on right: 12 13
a_statement (65)
    on left: 28, on right: 19
b_statement (66)
    on left: 29 30, on right: 20
c_statement (67)
    on left: 31, on right: 21
d_statement (68)
    on left: 32, on right: 22
e_statement (69)
    on left: 33, on right: 23
f_statement (70)
    on left: 34, on right: 24
g_statement (71)
    on left: 35, on right: 25
h_statement (72)
    on left: 36, on right: 26
i_statement (73)
    on left: 37, on right: 27
var (74)
    on left: 38 39, on right: 28 40 41 75
var_ns (75)
    on left: 40 41, on right: 34 35 40
bool_expr (76)
    on left: 42 43, on right: 29 30 31 32 43 51
relation_and_expr (77)
    on left: 44 45, on right: 42 43 45
relation_expr (78)
    on left: 46 47, on right: 44 45
rexpr (79)
    on left: 48 49 50 51, on right: 46 47
comp (80)
    on left: 52 53 54 55 56 57, on right: 48
expression (81)
    on left: 58 59, on right: 28 37 39 48 77 80 81
exprsum_s (82)
    on left: 60 61, on right: 58 60
exprsum (83)
    on left: 62 63, on right: 60 61
multiplicative_expr (84)
    on left: 64 65, on right: 58 59 62 63
term_s (85)
    on left: 66 67 68 69 70 71, on right: 64 66 68 70
term (86)
    on left: 72 73 74, on right: 64 65 66 67 68 69 70 71
upterm (87)
    on left: 75 76 77, on right: 72 73
termidentifier (88)
    on left: 78 79, on right: 74
termexpression (89)
    on left: 80 81, on right: 78 81


State 0

    0 $accept: . program $end

    FUNCTION  shift, and go to state 1

    program   go to state 2
    function  go to state 3


State 1

    3 function: FUNCTION . IDENT SEMICOLON function_chunk_a function_chunk_b function_chunk_c

    IDENT  shift, and go to state 4


State 2

    0 $accept: program . $end
    1 program: program . function

    $end      shift, and go to state 5
    FUNCTION  shift, and go to state 1

    function  go to state 6


State 3

    2 program: function .

    $default  reduce using rule 2 (program)


State 4

    3 function: FUNCTION IDENT . SEMICOLON function_chunk_a function_chunk_b function_chunk_c

    SEMICOLON  shift, and go to state 7


State 5

    0 $accept: program $end .

    $default  accept


State 6

    1 program: program function .

    $default  reduce using rule 1 (program)


State 7

    3 function: FUNCTION IDENT SEMICOLON . function_chunk_a function_chunk_b function_chunk_c

    BEGIN_PARAMS  shift, and go to state 8

    function_chunk_a  go to state 9


State 8

    4 function_chunk_a: BEGIN_PARAMS . declaration_s END_PARAMS
    5                 | BEGIN_PARAMS . END_PARAMS

    END_PARAMS  shift, and go to state 10
    IDENT       shift, and go to state 11

    declaration_s  go to state 12
    declaration    go to state 13
    identifier_ns  go to state 14


State 9

    3 function: FUNCTION IDENT SEMICOLON function_chunk_a . function_chunk_b function_chunk_c

    BEGIN_LOCALS  shift, and go to state 15

    function_chunk_b  go to state 16


State 10

    5 function_chunk_a: BEGIN_PARAMS END_PARAMS .

    $default  reduce using rule 5 (function_chunk_a)


State 11

   15 identifier_ns: IDENT . COMMA identifier_ns
   16              | IDENT .

    COMMA  shift, and go to state 17

    $default  reduce using rule 16 (identifier_ns)


State 12

    4 function_chunk_a: BEGIN_PARAMS declaration_s . END_PARAMS

    END_PARAMS  shift, and go to state 18


State 13

   10 declaration_s: declaration . SEMICOLON declaration_s
   11              | declaration . SEMICOLON

    SEMICOLON  shift, and go to state 19


State 14

   14 declaration: identifier_ns . COLON arrayint

    COLON  shift, and go to state 20


State 15

    6 function_chunk_b: BEGIN_LOCALS . declaration_s END_LOCALS
    7                 | BEGIN_LOCALS . END_LOCALS

    END_LOCALS  shift, and go to state 21
    IDENT       shift, and go to state 11

    declaration_s  go to state 22
    declaration    go to state 13
    identifier_ns  go to state 14


State 16

    3 function: FUNCTION IDENT SEMICOLON function_chunk_a function_chunk_b . function_chunk_c

    BEGIN_BODY  shift, and go to state 23

    function_chunk_c  go to state 24


State 17

   15 identifier_ns: IDENT COMMA . identifier_ns

    IDENT  shift, and go to state 11

    identifier_ns  go to state 25


State 18

    4 function_chunk_a: BEGIN_PARAMS declaration_s END_PARAMS .

    $default  reduce using rule 4 (function_chunk_a)


State 19

   10 declaration_s: declaration SEMICOLON . declaration_s
   11              | declaration SEMICOLON .

    IDENT  shift, and go to state 11

    $default  reduce using rule 11 (declaration_s)

    declaration_s  go to state 26
    declaration    go to state 13
    identifier_ns  go to state 14


State 20

   14 declaration: identifier_ns COLON . arrayint

    INTEGER  shift, and go to state 27
    ARRAY    shift, and go to state 28

    arrayint  go to state 29


State 21

    7 function_chunk_b: BEGIN_LOCALS END_LOCALS .

    $default  reduce using rule 7 (function_chunk_b)


State 22

    6 function_chunk_b: BEGIN_LOCALS declaration_s . END_LOCALS

    END_LOCALS  shift, and go to state 30


State 23

    8 function_chunk_c: BEGIN_BODY . statement_ns END_BODY
    9                 | BEGIN_BODY . END_BODY

    END_BODY  shift, and go to state 31
    IF        shift, and go to state 32
    WHILE     shift, and go to state 33
    DO        shift, and go to state 34
    FOREACH   shift, and go to state 35
    CONTINUE  shift, and go to state 36
    READ      shift, and go to state 37
    WRITE     shift, and go to state 38
    RETURN    shift, and go to state 39
    IDENT     shift, and go to state 40

    statement_ns  go to state 41
    statement     go to state 42
    a_statement   go to state 43
    b_statement   go to state 44
    c_statement   go to state 45
    d_statement   go to state 46
    e_statement   go to state 47
    f_statement   go to state 48
    g_statement   go to state 49
    h_statement   go to state 50
    i_statement   go to state 51
    var           go to state 52


State 24

    3 function: FUNCTION IDENT SEMICOLON function_chunk_a function_chunk_b function_chunk_c .

    $default  reduce using rule 3 (function)


State 25

   15 identifier_ns: IDENT COMMA identifier_ns .

    $default  reduce using rule 15 (identifier_ns)


State 26

   10 declaration_s: declaration SEMICOLON declaration_s .

    $default  reduce using rule 10 (declaration_s)


State 27

   17 arrayint: INTEGER .

    $default  reduce using rule 17 (arrayint)


State 28

   18 arrayint: ARRAY . L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    L_SQUARE_BRACKET  shift, and go to state 53


State 29

   14 declaration: identifier_ns COLON arrayint .

    $default  reduce using rule 14 (declaration)


State 30

    6 function_chunk_b: BEGIN_LOCALS declaration_s END_LOCALS .

    $default  reduce using rule 6 (function_chunk_b)


State 31

    9 function_chunk_c: BEGIN_BODY END_BODY .

    $default  reduce using rule 9 (function_chunk_c)


State 32

   29 b_statement: IF . bool_expr THEN statement_ns ENDIF
   30            | IF . bool_expr THEN ELSE statement_ns ENDIF

    TRUE     shift, and go to state 54
    FALSE    shift, and go to state 55
    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 58
    SUB      shift, and go to state 59
    NOT      shift, and go to state 60

    var                  go to state 61
    bool_expr            go to state 62
    relation_and_expr    go to state 63
    relation_expr        go to state 64
    rexpr                go to state 65
    expression           go to state 66
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 33

   31 c_statement: WHILE . bool_expr BEGINLOOP statement_ns ENDLOOP

    TRUE     shift, and go to state 54
    FALSE    shift, and go to state 55
    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 58
    SUB      shift, and go to state 59
    NOT      shift, and go to state 60

    var                  go to state 61
    bool_expr            go to state 70
    relation_and_expr    go to state 63
    relation_expr        go to state 64
    rexpr                go to state 65
    expression           go to state 66
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 34

   32 d_statement: DO . BEGINLOOP statement_ns ENDLOOP WHILE bool_expr

    BEGINLOOP  shift, and go to state 71


State 35

   33 e_statement: FOREACH . IDENT IN IDENT BEGINLOOP statement_ns ENDLOOP

    IDENT  shift, and go to state 72


State 36

   36 h_statement: CONTINUE .

    $default  reduce using rule 36 (h_statement)


State 37

   34 f_statement: READ . var_ns

    IDENT  shift, and go to state 40

    var     go to state 73
    var_ns  go to state 74


State 38

   35 g_statement: WRITE . var_ns

    IDENT  shift, and go to state 40

    var     go to state 73
    var_ns  go to state 75


State 39

   37 i_statement: RETURN . expression

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var                  go to state 61
    expression           go to state 77
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 40

   38 var: IDENT .
   39    | IDENT . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 78

    $default  reduce using rule 38 (var)


State 41

    8 function_chunk_c: BEGIN_BODY statement_ns . END_BODY

    END_BODY  shift, and go to state 79


State 42

   12 statement_ns: statement . SEMICOLON statement_ns
   13             | statement . SEMICOLON

    SEMICOLON  shift, and go to state 80


State 43

   19 statement: a_statement .

    $default  reduce using rule 19 (statement)


State 44

   20 statement: b_statement .

    $default  reduce using rule 20 (statement)


State 45

   21 statement: c_statement .

    $default  reduce using rule 21 (statement)


State 46

   22 statement: d_statement .

    $default  reduce using rule 22 (statement)


State 47

   23 statement: e_statement .

    $default  reduce using rule 23 (statement)


State 48

   24 statement: f_statement .

    $default  reduce using rule 24 (statement)


State 49

   25 statement: g_statement .

    $default  reduce using rule 25 (statement)


State 50

   26 statement: h_statement .

    $default  reduce using rule 26 (statement)


State 51

   27 statement: i_statement .

    $default  reduce using rule 27 (statement)


State 52

   28 a_statement: var . ASSIGN expression

    ASSIGN  shift, and go to state 81


State 53

   18 arrayint: ARRAY L_SQUARE_BRACKET . NUMBER R_SQUARE_BRACKET OF INTEGER

    NUMBER  shift, and go to state 82


State 54

   49 rexpr: TRUE .

    $default  reduce using rule 49 (rexpr)


State 55

   50 rexpr: FALSE .

    $default  reduce using rule 50 (rexpr)


State 56

   76 upterm: NUMBER .

    $default  reduce using rule 76 (upterm)


State 57

   38 var: IDENT .
   39    | IDENT . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
   74 term: IDENT . termidentifier

    L_PAREN           shift, and go to state 83
    L_SQUARE_BRACKET  shift, and go to state 78

    $default  reduce using rule 38 (var)

    termidentifier  go to state 84


State 58

   51 rexpr: L_PAREN . bool_expr R_PAREN
   77 upterm: L_PAREN . expression R_PAREN

    TRUE     shift, and go to state 54
    FALSE    shift, and go to state 55
    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 58
    SUB      shift, and go to state 59
    NOT      shift, and go to state 60

    var                  go to state 61
    bool_expr            go to state 85
    relation_and_expr    go to state 63
    relation_expr        go to state 64
    rexpr                go to state 65
    expression           go to state 86
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 59

   73 term: SUB . upterm

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 40
    L_PAREN  shift, and go to state 76

    var     go to state 61
    upterm  go to state 87


State 60

   46 relation_expr: NOT . rexpr

    TRUE     shift, and go to state 54
    FALSE    shift, and go to state 55
    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 58
    SUB      shift, and go to state 59

    var                  go to state 61
    rexpr                go to state 88
    expression           go to state 66
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 61

   75 upterm: var .

    $default  reduce using rule 75 (upterm)


State 62

   29 b_statement: IF bool_expr . THEN statement_ns ENDIF
   30            | IF bool_expr . THEN ELSE statement_ns ENDIF

    THEN  shift, and go to state 89


State 63

   42 bool_expr: relation_and_expr .
   43          | relation_and_expr . OR bool_expr

    OR  shift, and go to state 90

    $default  reduce using rule 42 (bool_expr)


State 64

   44 relation_and_expr: relation_expr .
   45                  | relation_expr . AND relation_and_expr

    AND  shift, and go to state 91

    $default  reduce using rule 44 (relation_and_expr)


State 65

   47 relation_expr: rexpr .

    $default  reduce using rule 47 (relation_expr)


State 66

   48 rexpr: expression . comp expression

    LT   shift, and go to state 92
    LTE  shift, and go to state 93
    GT   shift, and go to state 94
    GTE  shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97

    comp  go to state 98


State 67

   58 expression: multiplicative_expr . exprsum_s
   59           | multiplicative_expr .

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100

    $default  reduce using rule 59 (expression)

    exprsum_s  go to state 101
    exprsum    go to state 102


State 68

   64 multiplicative_expr: term . term_s
   65                    | term .

    MULT  shift, and go to state 103
    DIV   shift, and go to state 104
    MOD   shift, and go to state 105

    $default  reduce using rule 65 (multiplicative_expr)

    term_s  go to state 106


State 69

   72 term: upterm .

    $default  reduce using rule 72 (term)


State 70

   31 c_statement: WHILE bool_expr . BEGINLOOP statement_ns ENDLOOP

    BEGINLOOP  shift, and go to state 107


State 71

   32 d_statement: DO BEGINLOOP . statement_ns ENDLOOP WHILE bool_expr

    IF        shift, and go to state 32
    WHILE     shift, and go to state 33
    DO        shift, and go to state 34
    FOREACH   shift, and go to state 35
    CONTINUE  shift, and go to state 36
    READ      shift, and go to state 37
    WRITE     shift, and go to state 38
    RETURN    shift, and go to state 39
    IDENT     shift, and go to state 40

    statement_ns  go to state 108
    statement     go to state 42
    a_statement   go to state 43
    b_statement   go to state 44
    c_statement   go to state 45
    d_statement   go to state 46
    e_statement   go to state 47
    f_statement   go to state 48
    g_statement   go to state 49
    h_statement   go to state 50
    i_statement   go to state 51
    var           go to state 52


State 72

   33 e_statement: FOREACH IDENT . IN IDENT BEGINLOOP statement_ns ENDLOOP

    IN  shift, and go to state 109


State 73

   40 var_ns: var . COMMA var_ns
   41       | var .

    COMMA  shift, and go to state 110

    $default  reduce using rule 41 (var_ns)


State 74

   34 f_statement: READ var_ns .

    $default  reduce using rule 34 (f_statement)


State 75

   35 g_statement: WRITE var_ns .

    $default  reduce using rule 35 (g_statement)


State 76

   77 upterm: L_PAREN . expression R_PAREN

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var                  go to state 61
    expression           go to state 111
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 77

   37 i_statement: RETURN expression .

    $default  reduce using rule 37 (i_statement)


State 78

   39 var: IDENT L_SQUARE_BRACKET . expression R_SQUARE_BRACKET

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var                  go to state 61
    expression           go to state 112
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 79

    8 function_chunk_c: BEGIN_BODY statement_ns END_BODY .

    $default  reduce using rule 8 (function_chunk_c)


State 80

   12 statement_ns: statement SEMICOLON . statement_ns
   13             | statement SEMICOLON .

    IF        shift, and go to state 32
    WHILE     shift, and go to state 33
    DO        shift, and go to state 34
    FOREACH   shift, and go to state 35
    CONTINUE  shift, and go to state 36
    READ      shift, and go to state 37
    WRITE     shift, and go to state 38
    RETURN    shift, and go to state 39
    IDENT     shift, and go to state 40

    $default  reduce using rule 13 (statement_ns)

    statement_ns  go to state 113
    statement     go to state 42
    a_statement   go to state 43
    b_statement   go to state 44
    c_statement   go to state 45
    d_statement   go to state 46
    e_statement   go to state 47
    f_statement   go to state 48
    g_statement   go to state 49
    h_statement   go to state 50
    i_statement   go to state 51
    var           go to state 52


State 81

   28 a_statement: var ASSIGN . expression

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var                  go to state 61
    expression           go to state 114
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 82

   18 arrayint: ARRAY L_SQUARE_BRACKET NUMBER . R_SQUARE_BRACKET OF INTEGER

    R_SQUARE_BRACKET  shift, and go to state 115


State 83

   78 termidentifier: L_PAREN . termexpression R_PAREN
   79               | L_PAREN . R_PAREN

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    R_PAREN  shift, and go to state 116
    SUB      shift, and go to state 59

    var                  go to state 61
    expression           go to state 117
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69
    termexpression       go to state 118


State 84

   74 term: IDENT termidentifier .

    $default  reduce using rule 74 (term)


State 85

   51 rexpr: L_PAREN bool_expr . R_PAREN

    R_PAREN  shift, and go to state 119


State 86

   48 rexpr: expression . comp expression
   77 upterm: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 120
    LT       shift, and go to state 92
    LTE      shift, and go to state 93
    GT       shift, and go to state 94
    GTE      shift, and go to state 95
    EQ       shift, and go to state 96
    NEQ      shift, and go to state 97

    comp  go to state 98


State 87

   73 term: SUB upterm .

    $default  reduce using rule 73 (term)


State 88

   46 relation_expr: NOT rexpr .

    $default  reduce using rule 46 (relation_expr)


State 89

   29 b_statement: IF bool_expr THEN . statement_ns ENDIF
   30            | IF bool_expr THEN . ELSE statement_ns ENDIF

    IF        shift, and go to state 32
    ELSE      shift, and go to state 121
    WHILE     shift, and go to state 33
    DO        shift, and go to state 34
    FOREACH   shift, and go to state 35
    CONTINUE  shift, and go to state 36
    READ      shift, and go to state 37
    WRITE     shift, and go to state 38
    RETURN    shift, and go to state 39
    IDENT     shift, and go to state 40

    statement_ns  go to state 122
    statement     go to state 42
    a_statement   go to state 43
    b_statement   go to state 44
    c_statement   go to state 45
    d_statement   go to state 46
    e_statement   go to state 47
    f_statement   go to state 48
    g_statement   go to state 49
    h_statement   go to state 50
    i_statement   go to state 51
    var           go to state 52


State 90

   43 bool_expr: relation_and_expr OR . bool_expr

    TRUE     shift, and go to state 54
    FALSE    shift, and go to state 55
    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 58
    SUB      shift, and go to state 59
    NOT      shift, and go to state 60

    var                  go to state 61
    bool_expr            go to state 123
    relation_and_expr    go to state 63
    relation_expr        go to state 64
    rexpr                go to state 65
    expression           go to state 66
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 91

   45 relation_and_expr: relation_expr AND . relation_and_expr

    TRUE     shift, and go to state 54
    FALSE    shift, and go to state 55
    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 58
    SUB      shift, and go to state 59
    NOT      shift, and go to state 60

    var                  go to state 61
    relation_and_expr    go to state 124
    relation_expr        go to state 64
    rexpr                go to state 65
    expression           go to state 66
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 92

   54 comp: LT .

    $default  reduce using rule 54 (comp)


State 93

   56 comp: LTE .

    $default  reduce using rule 56 (comp)


State 94

   55 comp: GT .

    $default  reduce using rule 55 (comp)


State 95

   57 comp: GTE .

    $default  reduce using rule 57 (comp)


State 96

   52 comp: EQ .

    $default  reduce using rule 52 (comp)


State 97

   53 comp: NEQ .

    $default  reduce using rule 53 (comp)


State 98

   48 rexpr: expression comp . expression

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var                  go to state 61
    expression           go to state 125
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 99

   62 exprsum: ADD . multiplicative_expr

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var                  go to state 61
    multiplicative_expr  go to state 126
    term                 go to state 68
    upterm               go to state 69


State 100

   63 exprsum: SUB . multiplicative_expr

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var                  go to state 61
    multiplicative_expr  go to state 127
    term                 go to state 68
    upterm               go to state 69


State 101

   58 expression: multiplicative_expr exprsum_s .

    $default  reduce using rule 58 (expression)


State 102

   60 exprsum_s: exprsum . exprsum_s
   61          | exprsum .

    ADD  shift, and go to state 99
    SUB  shift, and go to state 100

    $default  reduce using rule 61 (exprsum_s)

    exprsum_s  go to state 128
    exprsum    go to state 102


State 103

   66 term_s: MULT . term term_s
   67       | MULT . term

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var     go to state 61
    term    go to state 129
    upterm  go to state 69


State 104

   68 term_s: DIV . term term_s
   69       | DIV . term

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var     go to state 61
    term    go to state 130
    upterm  go to state 69


State 105

   70 term_s: MOD . term term_s
   71       | MOD . term

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var     go to state 61
    term    go to state 131
    upterm  go to state 69


State 106

   64 multiplicative_expr: term term_s .

    $default  reduce using rule 64 (multiplicative_expr)


State 107

   31 c_statement: WHILE bool_expr BEGINLOOP . statement_ns ENDLOOP

    IF        shift, and go to state 32
    WHILE     shift, and go to state 33
    DO        shift, and go to state 34
    FOREACH   shift, and go to state 35
    CONTINUE  shift, and go to state 36
    READ      shift, and go to state 37
    WRITE     shift, and go to state 38
    RETURN    shift, and go to state 39
    IDENT     shift, and go to state 40

    statement_ns  go to state 132
    statement     go to state 42
    a_statement   go to state 43
    b_statement   go to state 44
    c_statement   go to state 45
    d_statement   go to state 46
    e_statement   go to state 47
    f_statement   go to state 48
    g_statement   go to state 49
    h_statement   go to state 50
    i_statement   go to state 51
    var           go to state 52


State 108

   32 d_statement: DO BEGINLOOP statement_ns . ENDLOOP WHILE bool_expr

    ENDLOOP  shift, and go to state 133


State 109

   33 e_statement: FOREACH IDENT IN . IDENT BEGINLOOP statement_ns ENDLOOP

    IDENT  shift, and go to state 134


State 110

   40 var_ns: var COMMA . var_ns

    IDENT  shift, and go to state 40

    var     go to state 73
    var_ns  go to state 135


State 111

   77 upterm: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 120


State 112

   39 var: IDENT L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 136


State 113

   12 statement_ns: statement SEMICOLON statement_ns .

    $default  reduce using rule 12 (statement_ns)


State 114

   28 a_statement: var ASSIGN expression .

    $default  reduce using rule 28 (a_statement)


State 115

   18 arrayint: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET . OF INTEGER

    OF  shift, and go to state 137


State 116

   79 termidentifier: L_PAREN R_PAREN .

    $default  reduce using rule 79 (termidentifier)


State 117

   80 termexpression: expression .
   81               | expression . COMMA termexpression

    COMMA  shift, and go to state 138

    $default  reduce using rule 80 (termexpression)


State 118

   78 termidentifier: L_PAREN termexpression . R_PAREN

    R_PAREN  shift, and go to state 139


State 119

   51 rexpr: L_PAREN bool_expr R_PAREN .

    $default  reduce using rule 51 (rexpr)


State 120

   77 upterm: L_PAREN expression R_PAREN .

    $default  reduce using rule 77 (upterm)


State 121

   30 b_statement: IF bool_expr THEN ELSE . statement_ns ENDIF

    IF        shift, and go to state 32
    WHILE     shift, and go to state 33
    DO        shift, and go to state 34
    FOREACH   shift, and go to state 35
    CONTINUE  shift, and go to state 36
    READ      shift, and go to state 37
    WRITE     shift, and go to state 38
    RETURN    shift, and go to state 39
    IDENT     shift, and go to state 40

    statement_ns  go to state 140
    statement     go to state 42
    a_statement   go to state 43
    b_statement   go to state 44
    c_statement   go to state 45
    d_statement   go to state 46
    e_statement   go to state 47
    f_statement   go to state 48
    g_statement   go to state 49
    h_statement   go to state 50
    i_statement   go to state 51
    var           go to state 52


State 122

   29 b_statement: IF bool_expr THEN statement_ns . ENDIF

    ENDIF  shift, and go to state 141


State 123

   43 bool_expr: relation_and_expr OR bool_expr .

    $default  reduce using rule 43 (bool_expr)


State 124

   45 relation_and_expr: relation_expr AND relation_and_expr .

    $default  reduce using rule 45 (relation_and_expr)


State 125

   48 rexpr: expression comp expression .

    $default  reduce using rule 48 (rexpr)


State 126

   62 exprsum: ADD multiplicative_expr .

    $default  reduce using rule 62 (exprsum)


State 127

   63 exprsum: SUB multiplicative_expr .

    $default  reduce using rule 63 (exprsum)


State 128

   60 exprsum_s: exprsum exprsum_s .

    $default  reduce using rule 60 (exprsum_s)


State 129

   66 term_s: MULT term . term_s
   67       | MULT term .

    MULT  shift, and go to state 103
    DIV   shift, and go to state 104
    MOD   shift, and go to state 105

    $default  reduce using rule 67 (term_s)

    term_s  go to state 142


State 130

   68 term_s: DIV term . term_s
   69       | DIV term .

    MULT  shift, and go to state 103
    DIV   shift, and go to state 104
    MOD   shift, and go to state 105

    $default  reduce using rule 69 (term_s)

    term_s  go to state 143


State 131

   70 term_s: MOD term . term_s
   71       | MOD term .

    MULT  shift, and go to state 103
    DIV   shift, and go to state 104
    MOD   shift, and go to state 105

    $default  reduce using rule 71 (term_s)

    term_s  go to state 144


State 132

   31 c_statement: WHILE bool_expr BEGINLOOP statement_ns . ENDLOOP

    ENDLOOP  shift, and go to state 145


State 133

   32 d_statement: DO BEGINLOOP statement_ns ENDLOOP . WHILE bool_expr

    WHILE  shift, and go to state 146


State 134

   33 e_statement: FOREACH IDENT IN IDENT . BEGINLOOP statement_ns ENDLOOP

    BEGINLOOP  shift, and go to state 147


State 135

   40 var_ns: var COMMA var_ns .

    $default  reduce using rule 40 (var_ns)


State 136

   39 var: IDENT L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    $default  reduce using rule 39 (var)


State 137

   18 arrayint: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 148


State 138

   81 termexpression: expression COMMA . termexpression

    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 76
    SUB      shift, and go to state 59

    var                  go to state 61
    expression           go to state 117
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69
    termexpression       go to state 149


State 139

   78 termidentifier: L_PAREN termexpression R_PAREN .

    $default  reduce using rule 78 (termidentifier)


State 140

   30 b_statement: IF bool_expr THEN ELSE statement_ns . ENDIF

    ENDIF  shift, and go to state 150


State 141

   29 b_statement: IF bool_expr THEN statement_ns ENDIF .

    $default  reduce using rule 29 (b_statement)


State 142

   66 term_s: MULT term term_s .

    $default  reduce using rule 66 (term_s)


State 143

   68 term_s: DIV term term_s .

    $default  reduce using rule 68 (term_s)


State 144

   70 term_s: MOD term term_s .

    $default  reduce using rule 70 (term_s)


State 145

   31 c_statement: WHILE bool_expr BEGINLOOP statement_ns ENDLOOP .

    $default  reduce using rule 31 (c_statement)


State 146

   32 d_statement: DO BEGINLOOP statement_ns ENDLOOP WHILE . bool_expr

    TRUE     shift, and go to state 54
    FALSE    shift, and go to state 55
    NUMBER   shift, and go to state 56
    IDENT    shift, and go to state 57
    L_PAREN  shift, and go to state 58
    SUB      shift, and go to state 59
    NOT      shift, and go to state 60

    var                  go to state 61
    bool_expr            go to state 151
    relation_and_expr    go to state 63
    relation_expr        go to state 64
    rexpr                go to state 65
    expression           go to state 66
    multiplicative_expr  go to state 67
    term                 go to state 68
    upterm               go to state 69


State 147

   33 e_statement: FOREACH IDENT IN IDENT BEGINLOOP . statement_ns ENDLOOP

    IF        shift, and go to state 32
    WHILE     shift, and go to state 33
    DO        shift, and go to state 34
    FOREACH   shift, and go to state 35
    CONTINUE  shift, and go to state 36
    READ      shift, and go to state 37
    WRITE     shift, and go to state 38
    RETURN    shift, and go to state 39
    IDENT     shift, and go to state 40

    statement_ns  go to state 152
    statement     go to state 42
    a_statement   go to state 43
    b_statement   go to state 44
    c_statement   go to state 45
    d_statement   go to state 46
    e_statement   go to state 47
    f_statement   go to state 48
    g_statement   go to state 49
    h_statement   go to state 50
    i_statement   go to state 51
    var           go to state 52


State 148

   18 arrayint: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER .

    $default  reduce using rule 18 (arrayint)


State 149

   81 termexpression: expression COMMA termexpression .

    $default  reduce using rule 81 (termexpression)


State 150

   30 b_statement: IF bool_expr THEN ELSE statement_ns ENDIF .

    $default  reduce using rule 30 (b_statement)


State 151

   32 d_statement: DO BEGINLOOP statement_ns ENDLOOP WHILE bool_expr .

    $default  reduce using rule 32 (d_statement)


State 152

   33 e_statement: FOREACH IDENT IN IDENT BEGINLOOP statement_ns . ENDLOOP

    ENDLOOP  shift, and go to state 153


State 153

   33 e_statement: FOREACH IDENT IN IDENT BEGINLOOP statement_ns ENDLOOP .

    $default  reduce using rule 33 (e_statement)
